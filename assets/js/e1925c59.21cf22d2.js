"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[1637],{3905:(e,t,n)=>{n.r(t),n.d(t,{MDXContext:()=>c,MDXProvider:()=>u,mdx:()=>f,useMDXComponents:()=>d,withMDXComponents:()=>p});var i=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(){return(r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var i in n)Object.prototype.hasOwnProperty.call(n,i)&&(e[i]=n[i])}return e}).apply(this,arguments)}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,i,o=function(e,t){if(null==e)return{};var n,i,o={},r=Object.keys(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=i.createContext({}),p=function(e){return function(t){var n=d(t.components);return i.createElement(e,r({},t,{components:n}))}},d=function(e){var t=i.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},u=function(e){var t=d(e.components);return i.createElement(c.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},h=i.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,a=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),p=d(n),u=o,h=p["".concat(a,".").concat(u)]||p[u]||m[u]||r;return n?i.createElement(h,l(l({ref:t},c),{},{components:n})):i.createElement(h,l({ref:t},c))}));function f(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,a=new Array(r);a[0]=h;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:o,a[1]=l;for(var c=2;c<r;c++)a[c]=n[c];return i.createElement.apply(null,a)}return i.createElement.apply(null,n)}h.displayName="MDXCreateElement"},36742:(e,t,n)=>{n.r(t),n.d(t,{default:()=>m});var i=n(63366),o=n(67294),r=n(73727),a=n(52263),l=n(13919),s=n(10412),c=(0,o.createContext)({collectLink:function(){}}),p=n(44996),d=n(18780),u=["isNavLink","to","href","activeClassName","isActive","data-noBrokenLinkCheck","autoAddBaseUrl"];const m=function(e){var t,n,m=e.isNavLink,h=e.to,f=e.href,b=e.activeClassName,g=e.isActive,v=e["data-noBrokenLinkCheck"],x=e.autoAddBaseUrl,w=void 0===x||x,y=(0,i.Z)(e,u),C=(0,a.default)().siteConfig,k=C.trailingSlash,O=C.baseUrl,N=(0,p.useBaseUrlUtils)().withBaseUrl,S=(0,o.useContext)(c),P=h||f,T=(0,l.Z)(P),E=null==P?void 0:P.replace("pathname://",""),j=void 0!==E?(n=E,w&&function(e){return e.startsWith("/")}(n)?N(n):n):void 0;j&&T&&(j=(0,d.applyTrailingSlash)(j,{trailingSlash:k,baseUrl:O}));var D,U=(0,o.useRef)(!1),M=m?r.OL:r.rU,W=s.default.canUseIntersectionObserver;(0,o.useEffect)((function(){return!W&&T&&null!=j&&window.docusaurus.prefetch(j),function(){W&&D&&D.disconnect()}}),[j,W,T]);var A=null!==(t=null==j?void 0:j.startsWith("#"))&&void 0!==t&&t,F=!j||!T||A;return j&&T&&!A&&!v&&S.collectLink(j),F?o.createElement("a",Object.assign({href:j},P&&!T&&{target:"_blank",rel:"noopener noreferrer"},y)):o.createElement(M,Object.assign({},y,{onMouseEnter:function(){U.current||null==j||(window.docusaurus.preload(j),U.current=!0)},innerRef:function(e){var t,n;W&&e&&T&&(t=e,n=function(){null!=j&&window.docusaurus.prefetch(j)},(D=new window.IntersectionObserver((function(e){e.forEach((function(e){t===e.target&&(e.isIntersecting||e.intersectionRatio>0)&&(D.unobserve(t),D.disconnect(),n())}))}))).observe(t))},to:j||""},m&&{isActive:g,activeClassName:b}))}},13919:(e,t,n)=>{function i(e){return!0===/^(\w*:|\/\/)/.test(e)}function o(e){return void 0!==e&&!i(e)}n.d(t,{b:()=>i,Z:()=>o})},44996:(e,t,n)=>{n.r(t),n.d(t,{useBaseUrlUtils:()=>r,default:()=>a});var i=n(52263),o=n(13919);function r(){var e=(0,i.default)().siteConfig,t=(e=void 0===e?{}:e).baseUrl,n=void 0===t?"/":t,r=e.url;return{withBaseUrl:function(e,t){return function(e,t,n,i){var r=void 0===i?{}:i,a=r.forcePrependBaseUrl,l=void 0!==a&&a,s=r.absolute,c=void 0!==s&&s;if(!n)return n;if(n.startsWith("#"))return n;if((0,o.b)(n))return n;if(l)return t+n;var p=n.startsWith(t)?n:t+n.replace(/^\//,"");return c?e+p:p}(r,n,e,t)}}}function a(e,t){return void 0===t&&(t={}),(0,r().withBaseUrl)(e,t)}},8802:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){var n=t.trailingSlash,i=t.baseUrl;if(e.startsWith("#"))return e;if(void 0===n)return e;var o,r=e.split(/[#?]/)[0],a="/"===r||r===i?r:(o=r,n?function(e){return e.endsWith("/")?e:e+"/"}(o):function(e){return e.endsWith("/")?e.slice(0,-1):e}(o));return e.replace(r,a)}},18780:function(e,t,n){var i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.uniq=t.applyTrailingSlash=void 0;var o=n(8802);Object.defineProperty(t,"applyTrailingSlash",{enumerable:!0,get:function(){return i(o).default}});var r=n(29964);Object.defineProperty(t,"uniq",{enumerable:!0,get:function(){return i(r).default}})},29964:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){return Array.from(new Set(e))}},50215:(e,t,n)=>{n.r(t),n.d(t,{frontMatter:()=>c,contentTitle:()=>p,metadata:()=>d,toc:()=>u,default:()=>g});var i=n(87462),o=n(63366),r=(n(67294),n(3905)),a=n(44996),l=n(36742),s=["components"],c={id:"establishing-a-connection",title:"Secure Communication"},p=void 0,d={unversionedId:"extending/establishing-a-connection",id:"extending/establishing-a-connection",isDocsHomePage:!1,title:"Secure Communication",description:"Below is an outline of how a connection is established between an app with our SDK integrated, and the desktop app. This all goes on behind the scenes inside the mobile SDK, so users shouldn't need to worry about it.",source:"@site/../docs/extending/establishing-a-connection.mdx",sourceDirName:"extending",slug:"/extending/establishing-a-connection",permalink:"/docs/extending/establishing-a-connection",editUrl:"https://github.com/facebook/flipper/blob/master/website/../docs/extending/establishing-a-connection.mdx",version:"current",frontMatter:{id:"establishing-a-connection",title:"Secure Communication"},sidebar:"setup",previous:{title:"Implementing a Flipper Client",permalink:"/docs/extending/new-clients"},next:{title:"Implementing Layout Inspection",permalink:"/docs/extending/supporting-layout"}},u=[{value:"Transport Protocol",id:"transport-protocol",children:[]},{value:"Client-Server relationship",id:"client-server-relationship",children:[]},{value:"Certificate Exchange",id:"certificate-exchange",children:[]}],m=function(e){return function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.mdx)("div",t)}},h=m("OssOnly"),f=m("FbInternalOnly"),b={toc:u};function g(e){var t=e.components,n=(0,o.Z)(e,s);return(0,r.mdx)("wrapper",(0,i.Z)({},b,n,{components:t,mdxType:"MDXLayout"}),(0,r.mdx)("p",null,"Below is an outline of how a connection is established between an app with our SDK integrated, and the desktop app. This all goes on behind the scenes inside the mobile SDK, so users shouldn't need to worry about it."),(0,r.mdx)("p",null,"The connection process is a little more involved than you might expect, to stop Flipper clients on mobile apps from connecting to any server that happens to be running on localhost and potentially leaking information from your app."),(0,r.mdx)("h2",{id:"transport-protocol"},"Transport Protocol"),(0,r.mdx)("p",null,"Flipper uses ",(0,r.mdx)("a",{parentName:"p",href:"http://rsocket.io/"},"RSocket")," to communicate between the desktop and mobile apps. RSocket allows for bi-directional communication."),(0,r.mdx)("h2",{id:"client-server-relationship"},"Client-Server relationship"),(0,r.mdx)("p",null,"When the desktop app starts up, it opens a secure socket on port 8088.\nThe Flipper client will continually attempt to connect to this port on localhost to establish a connection with the desktop app."),(0,r.mdx)("h2",{id:"certificate-exchange"},"Certificate Exchange"),(0,r.mdx)("p",null,"To avoid mobile apps from connecting to untrusted ports on localhost, a Flipper client should only connect to servers that have a valid, trusted TLS certificate.\nIn order for the mobile app to know which certificates it can trust, it conducts a certificate exchange with the desktop app before it can make its first secure connection."),(0,r.mdx)("p",null,"This is achieved through the following steps:"),(0,r.mdx)("ul",null,(0,r.mdx)("li",{parentName:"ul"},"Desktop app starts an insecure server on port 8089."),(0,r.mdx)("li",{parentName:"ul"},"Mobile app connects to localhost:8089 and sends a Certificate Signing Request to the desktop app."),(0,r.mdx)("li",{parentName:"ul"},"Desktop app uses it's private key (this is generated once and stored in ~/.flipper) to sign a client certificate for the mobile app."),(0,r.mdx)("li",{parentName:"ul"},"Along with the Certificate Signing Request, mobile app also lets the desktop app know which certificate exchange medium to use."),(0,r.mdx)("li",{parentName:"ul"},"If the chosen Certificate Exchange Medium is FS_ACCESS, the desktop uses ADB (for Android), or the mounted file system (for iOS simulators) to write the following files to the mobile app's private data partition",(0,r.mdx)("ul",{parentName:"li"},(0,r.mdx)("li",{parentName:"ul"},"Server certificate that the mobile app can now trust."),(0,r.mdx)("li",{parentName:"ul"},"Client certificate for the mobile app to use going forward."))),(0,r.mdx)("li",{parentName:"ul"},"If the chosen Certificate Exchange Medium is WWW, the desktop app will use your implementation of Certificate Uploader to upload the certificates.",(0,r.mdx)("ul",{parentName:"li"},(0,r.mdx)("li",{parentName:"ul"},"Once uploaded the desktop app will reply back with the device id, which can be used by Certificate Provider on the client side to fetch those certificates."),(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)(h,{mdxType:"OssOnly"}," Right now we do not support WWW mode. We are working on it to bring the support for open source.")," ",(0,r.mdx)(f,{mdxType:"FbInternalOnly"},"To know more about the WWW mode and how to use it, follow the guide ",(0,r.mdx)(l.default,{to:(0,a.default)("/docs/fb/www-certificate-exchange"),mdxType:"Link"},"here"),".")))),(0,r.mdx)("li",{parentName:"ul"},"Now the mobile app knows which server certificate it can trust, and can connect to the secure server.")),(0,r.mdx)("p",null,"This allows the mobile app to trust a certificate if and only if, it is stored inside its internal data partition. Typically it's only possible to write there with physical access to the device (i.e. through ADB or a mounted simulator)."),(0,r.mdx)("p",null,"To get the desktop app to generate a client certificate for your client, and then deploy it, go through the following steps:"),(0,r.mdx)("p",null,"Use an RSocket client to connect (insecurely) to the following URL:"),(0,r.mdx)("p",null,"(Parameters are defined in ",(0,r.mdx)("a",{parentName:"p",href:"new-clients"},"Implementing a Flipper Client"),")"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre"},"localhost:8089/sonar?os={OS}\n                     &device={DEVICE}\n                     &app={APP}\n                     &sdk_version={SDK_VERSION}\n                     &medium={CERTIFICATE_EXCHANGE_MEDIUM}\n")),(0,r.mdx)("p",null,"On that connection, send the following payload:"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-js"},'Request = {\n  "method": "signCertificate",\n  "csr": string,\n  "destination": string,\n  "medium": int\n}\n')),(0,r.mdx)("p",null,"Where ",(0,r.mdx)("inlineCode",{parentName:"p"},"csr")," is a Certificate Signing Request the client has generated, and ",(0,r.mdx)("inlineCode",{parentName:"p"},"destination")," identifies a location accessible to both the client and Flipper desktop, where the certificate should be placed."),(0,r.mdx)("p",null,"The Subject Common Name (CN=...) must be included in the CSR, and your ",(0,r.mdx)("inlineCode",{parentName:"p"},"CertificateProvider")," implementation in Flipper may use this in combination with the ",(0,r.mdx)("inlineCode",{parentName:"p"},"destination")," to determine where to put the certificate."),(0,r.mdx)("p",null,"This will ask Flipper desktop to generate a client certificate, using the CSR provided, and put it into the specified ",(0,r.mdx)("inlineCode",{parentName:"p"},"destination"),"."),(0,r.mdx)("p",null,"Depending on the client, ",(0,r.mdx)("inlineCode",{parentName:"p"},"destination")," can have a different meaning. A basic example would be a file path, that both the desktop and the client have access to. With this Flipper desktop could write the certificate to that path. A more involved example is that of the Android Client, where destination specifies a relative path inside an app container. And the Subject Common Name determines which app container. Together these two pieces of information form an absolute file path inside an android device."),(0,r.mdx)("p",null,"For Flipper desktop to work with a given Client type, it needs to be modified to know how to correctly interpret the ",(0,r.mdx)("inlineCode",{parentName:"p"},"destination")," argument, and deploy certificates to it."),(0,r.mdx)("p",null,(0,r.mdx)("inlineCode",{parentName:"p"},"destination")," field may not be relevant if your ",(0,r.mdx)("inlineCode",{parentName:"p"},"medium")," value is more than 1. ",(0,r.mdx)("inlineCode",{parentName:"p"},"medium=1"),"(default) means Flipper should do certificate exchange by directly putting certificates at ",(0,r.mdx)("inlineCode",{parentName:"p"},"destination")," in the sandbox of the app. ",(0,r.mdx)("inlineCode",{parentName:"p"},"medium=2")," means Flipper will use Certificate Uploader and Provider to upload certificates and download it on the client side respectively."),(0,r.mdx)("p",null,"You can see the current implementations in ",(0,r.mdx)("a",{parentName:"p",href:"https://github.com/facebook/flipper/blob/master/desktop/app/src/utils/CertificateProvider.tsx"},"CertificateProvider.tsx"),"."))}g.isMDXComponent=!0}}]);