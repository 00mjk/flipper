"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[7582],{3905:(e,n,t)=>{t.r(n),t.d(n,{MDXContext:()=>d,MDXProvider:()=>s,mdx:()=>h,useMDXComponents:()=>u,withMDXComponents:()=>c});var i=t(67294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function l(){return(l=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var i in t)Object.prototype.hasOwnProperty.call(t,i)&&(e[i]=t[i])}return e}).apply(this,arguments)}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function p(e,n){if(null==e)return{};var t,i,a=function(e,n){if(null==e)return{};var t,i,a={},l=Object.keys(e);for(i=0;i<l.length;i++)t=l[i],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(i=0;i<l.length;i++)t=l[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var d=i.createContext({}),c=function(e){return function(n){var t=u(n.components);return i.createElement(e,l({},n,{components:t}))}},u=function(e){var n=i.useContext(d),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},s=function(e){var n=u(e.components);return i.createElement(d.Provider,{value:n},e.children)},m={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},g=i.forwardRef((function(e,n){var t=e.components,a=e.mdxType,l=e.originalType,r=e.parentName,d=p(e,["components","mdxType","originalType","parentName"]),c=u(t),s=a,g=c["".concat(r,".").concat(s)]||c[s]||m[s]||l;return t?i.createElement(g,o(o({ref:n},d),{},{components:t})):i.createElement(g,o({ref:n},d))}));function h(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var l=t.length,r=new Array(l);r[0]=g;var o={};for(var p in n)hasOwnProperty.call(n,p)&&(o[p]=n[p]);o.originalType=e,o.mdxType="string"==typeof e?e:a,r[1]=o;for(var d=2;d<l;d++)r[d]=t[d];return i.createElement.apply(null,r)}return i.createElement.apply(null,t)}g.displayName="MDXCreateElement"},58215:(e,n,t)=>{t.d(n,{Z:()=>a});var i=t(67294);const a=function(e){var n=e.children,t=e.hidden,a=e.className;return i.createElement("div",{role:"tabpanel",hidden:t,className:a},n)}},55064:(e,n,t)=>{t.d(n,{Z:()=>u});var i=t(67294),a=t(79443);const l=function(){var e=(0,i.useContext)(a.Z);if(null==e)throw new Error('"useUserPreferencesContext" is used outside of "Layout" component.');return e};var r=t(86010);const o="tabItem_1uMI",p="tabItemActive_2DSg";var d=37,c=39;const u=function(e){var n=e.lazy,t=e.block,a=e.defaultValue,u=e.values,s=e.groupId,m=e.className,g=l(),h=g.tabGroupChoices,b=g.setTabGroupChoices,f=(0,i.useState)(a),v=f[0],x=f[1],y=i.Children.toArray(e.children),P=[];if(null!=s){var F=h[s];null!=F&&F!==v&&u.some((function(e){return e.value===F}))&&x(F)}var C=function(e){var n=e.currentTarget,t=P.indexOf(n),i=u[t].value;x(i),null!=s&&(b(s,i),setTimeout((function(){var e,t,i,a,l,r,o,d;(e=n.getBoundingClientRect(),t=e.top,i=e.left,a=e.bottom,l=e.right,r=window,o=r.innerHeight,d=r.innerWidth,t>=0&&l<=d&&a<=o&&i>=0)||(n.scrollIntoView({block:"center",behavior:"smooth"}),n.classList.add(p),setTimeout((function(){return n.classList.remove(p)}),2e3))}),150))},N=function(e){var n,t;switch(e.keyCode){case c:var i=P.indexOf(e.target)+1;t=P[i]||P[0];break;case d:var a=P.indexOf(e.target)-1;t=P[a]||P[P.length-1]}null==(n=t)||n.focus()};return i.createElement("div",{className:"tabs-container"},i.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.default)("tabs",{"tabs--block":t},m)},u.map((function(e){var n=e.value,t=e.label;return i.createElement("li",{role:"tab",tabIndex:v===n?0:-1,"aria-selected":v===n,className:(0,r.default)("tabs__item",o,{"tabs__item--active":v===n}),key:n,ref:function(e){return P.push(e)},onKeyDown:N,onFocus:C,onClick:C},t)}))),n?(0,i.cloneElement)(y.filter((function(e){return e.props.value===v}))[0],{className:"margin-vert--md"}):i.createElement("div",{className:"margin-vert--md"},y.map((function(e,n){return(0,i.cloneElement)(e,{key:n,hidden:e.props.value!==v})}))))}},79443:(e,n,t)=>{t.d(n,{Z:()=>i});const i=(0,t(67294).createContext)(void 0)},70667:(e,n,t)=>{t.r(n),t.d(n,{frontMatter:()=>c,contentTitle:()=>u,metadata:()=>s,toc:()=>m,default:()=>h});var i=t(87462),a=t(63366),l=(t(67294),t(3905)),r=t(55064),o=t(58215),p=t(44256),d=["components"],c={id:"create-plugin",title:"Client Plugin API"},u=void 0,s={unversionedId:"extending/create-plugin",id:"extending/create-plugin",isDocsHomePage:!1,title:"Client Plugin API",description:"FlipperPlugin",source:"@site/../docs/extending/create-plugin.mdx",sourceDirName:"extending",slug:"/extending/create-plugin",permalink:"/docs/extending/create-plugin",editUrl:"https://github.com/facebook/flipper/blob/main/website/../docs/extending/create-plugin.mdx",version:"current",frontMatter:{id:"create-plugin",title:"Client Plugin API"},sidebar:"extending",previous:{title:"Searching and Filtering",permalink:"/docs/extending/search-and-filter"},next:{title:"Error Handling",permalink:"/docs/extending/error-handling"}},m=[{value:"FlipperPlugin",id:"flipperplugin",children:[]},{value:"Using FlipperConnection",id:"using-flipperconnection",children:[]},{value:"Push data to the desktop",id:"push-data-to-the-desktop",children:[{value:"Using a plugin instance to send data",id:"using-a-plugin-instance-to-send-data",children:[]},{value:"Bi-directional communication demo",id:"bi-directional-communication-demo",children:[]}]},{value:"Background Plugins",id:"background-plugins",children:[]}],g={toc:m};function h(e){var n=e.components,t=(0,a.Z)(e,d);return(0,l.mdx)("wrapper",(0,i.Z)({},g,t,{components:n,mdxType:"MDXLayout"}),(0,l.mdx)("h2",{id:"flipperplugin"},"FlipperPlugin"),(0,l.mdx)("p",null,"The plugin implementation that runs on the (mobile) application side of things is called the ",(0,l.mdx)("em",{parentName:"p"},"client plugin")," in Flipper terminology.\nTo build a client plugin, implement the ",(0,l.mdx)("inlineCode",{parentName:"p"},"FlipperPlugin")," interface."),(0,l.mdx)("p",null,"The ID that is returned from your implementation needs to match the ",(0,l.mdx)("inlineCode",{parentName:"p"},"name")," defined in your JavaScript counterpart's ",(0,l.mdx)("inlineCode",{parentName:"p"},"package.json"),"."),(0,l.mdx)(r.Z,{defaultValue:"android",values:[{label:"Android",value:"android"},{label:"iOS",value:"ios"},{label:"C++",value:"cpp"},{label:"React Native (JS)",value:"rn"}],mdxType:"Tabs"},(0,l.mdx)(o.Z,{value:"android",mdxType:"TabItem"},(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-java"},'public class MyFlipperPlugin implements FlipperPlugin {\n  private FlipperConnection mConnection;\n\n  @Override\n  public String getId() {\n    return "MyFlipperPlugin";\n  }\n\n  @Override\n  public void onConnect(FlipperConnection connection) throws Exception {\n    mConnection = connection;\n  }\n\n  @Override\n  public void onDisconnect() throws Exception {\n    mConnection = null;\n  }\n\n  @Override\n  public boolean runInBackground() {\n    return false;\n  }\n}\n'))),(0,l.mdx)(o.Z,{value:"ios",mdxType:"TabItem"},(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-objc"},'@interface MyFlipperPlugin : NSObject<FlipperPlugin>\n@end\n\n@implementation MyFlipperPlugin\n\n- (NSString*)identifier { return @"MyFlipperPlugin"; }\n- (void)didConnect:(FlipperConnection*)connection {}\n- (void)didDisconnect {}\n- (BOOL)runInBackground {}\n\n@end\n'))),(0,l.mdx)(o.Z,{value:"cpp",mdxType:"TabItem"},(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-cpp"},'class MyFlipperPlugin : public FlipperPlugin {\npublic:\n  std::string identifier() const override { return "MyFlipperPlugin"; }\n  void didConnect(std::shared_ptr<FlipperConnection> conn) override;\n  void didDisconnect() override;\n  bool runInBackground() override;\n};\n'))),(0,l.mdx)(o.Z,{value:"rn",mdxType:"TabItem"},(0,l.mdx)("div",{class:"warning"},(0,l.mdx)("p",null,"Please note that using Flipper from JavaScript in React Native requires the package ",(0,l.mdx)("a",{parentName:"p",href:"https://www.npmjs.com/package/react-native-flipper"},(0,l.mdx)("inlineCode",{parentName:"a"},"react-native-flipper"))," to be installed in the hosting application.")),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-javascript"},"import {addPlugin} from 'react-native-flipper';\n\naddPlugin({\n  getId() {\n    return 'MyFlipperPlugin';\n  },\n  onConnect(connection) {\n    console.log(\"connected\");\n  },\n  onDisconnect() {\n    console.log(\"disconnected\");\n  },\n  runInBackground() {\n    return false;\n  }\n})\n")))),(0,l.mdx)("h2",{id:"using-flipperconnection"},"Using FlipperConnection"),(0,l.mdx)("p",null,(0,l.mdx)("inlineCode",{parentName:"p"},"onConnect")," will be called when your plugin becomes active. This will provide a ",(0,l.mdx)("inlineCode",{parentName:"p"},"FlipperConnection")," allowing you to register receivers for desktop method calls and respond with data."),(0,l.mdx)(r.Z,{defaultValue:"android",values:[{label:"Android",value:"android"},{label:"iOS",value:"ios"},{label:"C++",value:"cpp"},{label:"React Native (JS)",value:"rn"}],mdxType:"Tabs"},(0,l.mdx)(o.Z,{value:"android",mdxType:"TabItem"},(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-java"},'connection.receive("getData", new FlipperReceiver() {\n  @Override\n  public void onReceive(FlipperObject params, FlipperResponder responder) throws Exception {\n    responder.success(\n        new FlipperObject.Builder()\n            .put("data", MyData.get())\n            .build());\n  }\n});\n'))),(0,l.mdx)(o.Z,{value:"ios",mdxType:"TabItem"},(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-objc"},'@interface MyFlipperPlugin : NSObject<FlipperPlugin>\n@end\n\n@implementation MyFlipperPlugin\n\n- (NSString*)identifier { return @"MyFlipperPlugin"; }\n\n- (void)didConnect:(FlipperConnection*)connection\n{\n  [connection receive:@"getData" withBlock:^(NSDictionary *params, FlipperResponder *responder) {\n    [responder success:@{\n      @"data":[MyData get],\n    }];\n  }];\n}\n\n- (void)didDisonnect {}\n\n@end\n'))),(0,l.mdx)(o.Z,{value:"cpp",mdxType:"TabItem"},(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-cpp"},'void MyFlipperPlugin::didConnect(std::shared_ptr<FlipperConnection> conn) {\n  conn->receive("getData", [](const folly::dynamic &params,\n                             std::unique_ptr<FlipperResponder> responder) {\n    dynamic response = folly::dynamic::object("data", getMyData());\n    responder->success(response);\n  });\n}\n'))),(0,l.mdx)(o.Z,{value:"rn",mdxType:"TabItem"},(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-javascript"},'addPlugin({\n  getId() {\n    return \'MyFlipperPlugin\';\n  },\n  onConnect(connection) {\n    console.log("connected");\n    connection.receive("getData", (data, responder) => {\n      console.log("incoming data", data);\n      // respond with some data\n      responder.success({\n        ack: true\n      });\n    });\n  },\n  // ...as-is\n})\n')))),(0,l.mdx)("h2",{id:"push-data-to-the-desktop"},"Push data to the desktop"),(0,l.mdx)("p",null,"You don't have to wait for the desktop to request data though, you can also push data directly to the desktop. If the JS plugin subscribes to the same method, it will receive the data."),(0,l.mdx)(r.Z,{defaultValue:"android",values:[{label:"Android",value:"android"},{label:"iOS",value:"ios"},{label:"C++",value:"cpp"},{label:"React Native (JS)",value:"rn"}],mdxType:"Tabs"},(0,l.mdx)(o.Z,{value:"android",mdxType:"TabItem"},(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-java"},'connection.send("MyMessage",\n    new FlipperObject.Builder()\n        .put("message", "Hello")\n        .build()\n'))),(0,l.mdx)(o.Z,{value:"ios",mdxType:"TabItem"},(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-objc"},'[connection send:@"getData" withParams:@{@"message":@"hello"}];\n'))),(0,l.mdx)(o.Z,{value:"cpp",mdxType:"TabItem"},(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-cpp"},'void MyFlipperPlugin::didConnect(std::shared_ptr<FlipperConnection> conn) {\n  dynamic message = folly::dynamic::object("message", "hello");\n  conn->send("getData", message);\n}\n'))),(0,l.mdx)(o.Z,{value:"rn",mdxType:"TabItem"},(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-javascript"},'addPlugin({\n  getId() {\n    return \'MyFlipperPlugin\';\n  },\n  onConnect(connection) {\n    console.log("connected");\n    connection.send("newRow", { message: "Hello" });\n  },\n  // ...as-is\n})\n')))),(0,l.mdx)("h3",{id:"using-a-plugin-instance-to-send-data"},"Using a plugin instance to send data"),(0,l.mdx)("p",null,"It is often useful to get an instance of a Flipper plugin to send data to it. Flipper makes this simple with built-in support."),(0,l.mdx)(p.FbInternalOnly,{mdxType:"FbInternalOnly"},(0,l.mdx)("h4",{id:"dependency-injection-android-only"},"Dependency Injection (Android only)"),(0,l.mdx)("p",null,"The preferred method to obtain a plugin instance is to use dependency injection when available.\nFor apps like fb4a that use dependency injection, a Module should have already been created by the create-plugin script.\nThis module will define a Singleton instance of your plugin that gets added to the FlipperClient."),(0,l.mdx)("p",null,"You should use this instance of the plugin, by having it injected into your product code by the DI framework.\nAlternatively, you can modify the plugin's injection module so that it injects a component into the FlipperPlugin.")),(0,l.mdx)("h4",{id:"using-flipperclient-to-obtain-a-plugin-instance"},"using FlipperClient to obtain a plugin instance"),(0,l.mdx)("p",null,"Plugins should be treated as singleton instances as there can only be one ",(0,l.mdx)("inlineCode",{parentName:"p"},"FlipperClient")," and each ",(0,l.mdx)("inlineCode",{parentName:"p"},"FlipperClient")," can only have one instance of a certain plugin. The Flipper API makes this simple by offering a way to get the current client and query it for plugins."),(0,l.mdx)("p",null,'Plugins are identified by the string that their identifier method returns, in this example, "MyFlipperPlugin". Note that null checks may be required as plugins may not be initialized, for example in production builds.'),(0,l.mdx)(r.Z,{defaultValue:"android",values:[{label:"Android",value:"android"},{label:"iOS",value:"ios"},{label:"C++",value:"cpp"}],mdxType:"Tabs"},(0,l.mdx)(o.Z,{value:"android",mdxType:"TabItem"},(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-java"},"final FlipperClient client = AndroidFlipperClient.getInstanceIfInitialized(context);\nif (client != null) {\n  final MyFlipperPlugin plugin = client.getPluginByClass(MyFlipperPlugin.class);\n  plugin.sendData(myData);\n}\n"))),(0,l.mdx)(o.Z,{value:"ios",mdxType:"TabItem"},(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-objc"},'FlipperClient *client = [FlipperClient sharedClient];\nMyFlipperPlugin *myPlugin = [client pluginWithIdentifier:@"MyFlipperPlugin"];\n[myPlugin sendData:myData];\n'))),(0,l.mdx)(o.Z,{value:"cpp",mdxType:"TabItem"},(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-cpp"},'auto& client = FlipperClient::instance();\nauto myPlugin = client.getPlugin<MyFlipperPlugin>("MyFlipperPlugin");\nif (myPlugin) {\n  myPlugin->sendData(myData);\n}\n')))),(0,l.mdx)("p",null,"Here, ",(0,l.mdx)("inlineCode",{parentName:"p"},"sendData")," is an example of a method that might be implemented by the Flipper plugin."),(0,l.mdx)("h3",{id:"bi-directional-communication-demo"},"Bi-directional communication demo"),(0,l.mdx)("p",null,"An minimal communication demo can be found in our ","[Sample project]",":"),(0,l.mdx)("ul",null,(0,l.mdx)("li",{parentName:"ul"},(0,l.mdx)("a",{parentName:"li",href:"https://github.com/facebook/flipper/blob/main/desktop/plugins/public/example/index.tsx"},"Desktop implementation")),(0,l.mdx)("li",{parentName:"ul"},(0,l.mdx)("a",{parentName:"li",href:"https://github.com/facebook/flipper/blob/main/android/sample/src/debug/java/com/facebook/flipper/plugins/example/ExampleFlipperPlugin.java"},"Android implementation")," / ",(0,l.mdx)("a",{parentName:"li",href:"https://github.com/facebook/flipper/tree/7bd4f80c2570bebb52af3cf49e45fc6130d6a473/iOS/Plugins/FlipperKitExamplePlugin/FlipperKitExamplePlugin"},"iOS implementation"))),(0,l.mdx)("h2",{id:"background-plugins"},"Background Plugins"),(0,l.mdx)("p",null,"In some cases you may want to provide data to Flipper even when your plugin is not currently active. Returning true in ",(0,l.mdx)("inlineCode",{parentName:"p"},"runInBackground()")," will result in ",(0,l.mdx)("inlineCode",{parentName:"p"},"onConnect")," being called as soon as Flipper connects, and allow you to use the connection at any time. See the ",(0,l.mdx)("a",{parentName:"p",href:"client-plugin-lifecycle"},"Client Plugin Lifecycle")," for more details."),(0,l.mdx)("p",null,"This should be used in combination with a ",(0,l.mdx)("inlineCode",{parentName:"p"},"persistedStateReducer")," on the desktop side. See the ",(0,l.mdx)("a",{parentName:"p",href:"js-plugin-api#background-plugins"},"JS Plugin API")," for details."),(0,l.mdx)("p",null,"The benefit is that the desktop plugin can process this data in the background and fire notifications. It also reduces the number of renders and time taken to display the data when the plugin becomes active."),(0,l.mdx)("div",{class:"warning"},(0,l.mdx)("p",null,"Please note that a background plugin could keep some data in memory until a Flipper connection is available, for example to keep statistics about the app startup process.\nHowever, a plugin shouldn't assume it will eventually get a connection, since this depends on whether the user has enabled the plugin on the Desktop side.\nSo make sure to not store unbounded amounts of data!")))}h.isMDXComponent=!0},86010:(e,n,t)=>{function i(e){var n,t,a="";if("string"==typeof e||"number"==typeof e)a+=e;else if("object"==typeof e)if(Array.isArray(e))for(n=0;n<e.length;n++)e[n]&&(t=i(e[n]))&&(a&&(a+=" "),a+=t);else for(n in e)e[n]&&(a&&(a+=" "),a+=n);return a}function a(){for(var e,n,t=0,a="";t<arguments.length;)(e=arguments[t++])&&(n=i(e))&&(a&&(a+=" "),a+=n);return a}t.r(n),t.d(n,{default:()=>a})}}]);