"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[4257],{3905:(e,n,t)=>{t.r(n),t.d(n,{MDXContext:()=>p,MDXProvider:()=>u,mdx:()=>f,useMDXComponents:()=>c,withMDXComponents:()=>d});var r=t(67294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(){return(o=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])}return e}).apply(this,arguments)}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var p=r.createContext({}),d=function(e){return function(n){var t=c(n.components);return r.createElement(e,o({},n,{components:t}))}},c=function(e){var n=r.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},u=function(e){var n=c(e.components);return r.createElement(p.Provider,{value:n},e.children)},m={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},g=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,o=e.originalType,a=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=c(t),u=i,g=d["".concat(a,".").concat(u)]||d[u]||m[u]||o;return t?r.createElement(g,l(l({ref:n},p),{},{components:t})):r.createElement(g,l({ref:n},p))}));function f(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var o=t.length,a=new Array(o);a[0]=g;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l.mdxType="string"==typeof e?e:i,a[1]=l;for(var p=2;p<o;p++)a[p]=t[p];return r.createElement.apply(null,a)}return r.createElement.apply(null,t)}g.displayName="MDXCreateElement"},58215:(e,n,t)=>{t.d(n,{Z:()=>i});var r=t(67294);const i=function(e){var n=e.children,t=e.hidden,i=e.className;return r.createElement("div",{role:"tabpanel",hidden:t,className:i},n)}},55064:(e,n,t)=>{t.d(n,{Z:()=>c});var r=t(67294),i=t(79443);const o=function(){var e=(0,r.useContext)(i.Z);if(null==e)throw new Error('"useUserPreferencesContext" is used outside of "Layout" component.');return e};var a=t(86010);const l="tabItem_1uMI",s="tabItemActive_2DSg";var p=37,d=39;const c=function(e){var n=e.lazy,t=e.block,i=e.defaultValue,c=e.values,u=e.groupId,m=e.className,g=o(),f=g.tabGroupChoices,x=g.setTabGroupChoices,h=(0,r.useState)(i),y=h[0],v=h[1],b=r.Children.toArray(e.children),k=[];if(null!=u){var w=f[u];null!=w&&w!==y&&c.some((function(e){return e.value===w}))&&v(w)}var T=function(e){var n=e.currentTarget,t=k.indexOf(n),r=c[t].value;v(r),null!=u&&(x(u,r),setTimeout((function(){var e,t,r,i,o,a,l,p;(e=n.getBoundingClientRect(),t=e.top,r=e.left,i=e.bottom,o=e.right,a=window,l=a.innerHeight,p=a.innerWidth,t>=0&&o<=p&&i<=l&&r>=0)||(n.scrollIntoView({block:"center",behavior:"smooth"}),n.classList.add(s),setTimeout((function(){return n.classList.remove(s)}),2e3))}),150))},C=function(e){var n,t;switch(e.keyCode){case d:var r=k.indexOf(e.target)+1;t=k[r]||k[0];break;case p:var i=k.indexOf(e.target)-1;t=k[i]||k[k.length-1]}null==(n=t)||n.focus()};return r.createElement("div",{className:"tabs-container"},r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,a.default)("tabs",{"tabs--block":t},m)},c.map((function(e){var n=e.value,t=e.label;return r.createElement("li",{role:"tab",tabIndex:y===n?0:-1,"aria-selected":y===n,className:(0,a.default)("tabs__item",l,{"tabs__item--active":y===n}),key:n,ref:function(e){return k.push(e)},onKeyDown:C,onFocus:T,onClick:T},t)}))),n?(0,r.cloneElement)(b.filter((function(e){return e.props.value===y}))[0],{className:"margin-vert--md"}):r.createElement("div",{className:"margin-vert--md"},b.map((function(e,n){return(0,r.cloneElement)(e,{key:n,hidden:e.props.value!==y})}))))}},79443:(e,n,t)=>{t.d(n,{Z:()=>r});const r=(0,t(67294).createContext)(void 0)},89082:(e,n,t)=>{t.r(n),t.d(n,{frontMatter:()=>p,contentTitle:()=>d,metadata:()=>c,toc:()=>u,default:()=>v});var r=t(22122),i=t(19756),o=(t(67294),t(3905)),a=t(55064),l=t(58215),s=["components"],p={id:"testing",title:"Testing"},d=void 0,c={unversionedId:"extending/testing",id:"extending/testing",isDocsHomePage:!1,title:"Testing",description:"Developer tools are only used if they work. We have built APIs to test plugins.",source:"@site/../docs/extending/testing.mdx",sourceDirName:"extending",slug:"/extending/testing",permalink:"/docs/extending/testing",editUrl:"https://github.com/facebook/flipper/blob/master/website/../docs/extending/testing.mdx",version:"current",frontMatter:{id:"testing",title:"Testing"},sidebar:"extending",previous:{title:"Plugin structure",permalink:"/docs/extending/desktop-plugin-structure"},next:{title:"Debugging",permalink:"/docs/extending/debugging"}},u=[{value:"Writing tests",id:"writing-tests",children:[]},{value:"Desktop plugins",id:"desktop-plugins",children:[]},{value:"Client plugins",id:"client-plugins",children:[]},{value:"Running (Flipper) tests",id:"running-flipper-tests",children:[{value:"Flipper Desktop",id:"flipper-desktop",children:[]},{value:"Flipper SDK",id:"flipper-sdk",children:[]},{value:"iOS",id:"ios",children:[]},{value:"React Native",id:"react-native",children:[]}]}],m=function(e){return function(n){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,o.mdx)("div",n)}},g=m("OssOnly"),f=m("FbAndroidTesting"),x=m("FbIosTesting"),h=m("FbInternalOnly"),y={toc:u};function v(e){var n=e.components,t=(0,i.Z)(e,s);return(0,o.mdx)("wrapper",(0,r.Z)({},y,t,{components:n,mdxType:"MDXLayout"}),(0,o.mdx)("p",null,"Developer tools are only used if they work. We have built APIs to test plugins."),(0,o.mdx)("h2",{id:"writing-tests"},"Writing tests"),(0,o.mdx)("h2",{id:"desktop-plugins"},"Desktop plugins"),(0,o.mdx)("p",null,"Flipper uses ",(0,o.mdx)("a",{parentName:"p",href:"https://jestjs.io/"},"Jest")," as unit testing framework."),(0,o.mdx)("p",null,"Writing unit tests for Flipper Desktop plugins is covered in detail in the ",(0,o.mdx)("a",{parentName:"p",href:"../../docs/tutorial/js-custom#testing-plugin-logic"},"tutorial"),"."),(0,o.mdx)("p",null,"The ",(0,o.mdx)("inlineCode",{parentName:"p"},"flipper-plugin")," package provide several ",(0,o.mdx)("a",{parentName:"p",href:"../../docs/extending/flipper-plugin#testutils"},"test utilities")," to make testing more convenient."),(0,o.mdx)("h2",{id:"client-plugins"},"Client plugins"),(0,o.mdx)(a.Z,{defaultValue:"android",values:[{label:"Android",value:"android"},{label:"iOS",value:"ios"}],mdxType:"Tabs"},(0,o.mdx)(l.Z,{value:"android",mdxType:"TabItem"},(0,o.mdx)(g,{mdxType:"OssOnly"},"Start by creating your first test file in this directory `MyFlipperPluginTest.java`. In the test method body we create our plugin which we want to test as well as a `FlipperConnectionMock`. In this contrived example we simply assert that our plugin's connected status is what we expect.",(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-java"},"@RunWith(RobolectricTestRunner.class)\npublic class MyFlipperPluginTest {\n\n  @Test\n  public void myTest() {\n    final MyFlipperPlugin plugin = new MyFlipperPlugin();\n    final FlipperConnectionMock connection = new FlipperConnectionMock();\n\n    plugin.onConnect(connection);\n    assertThat(plugin.connected(), equalTo(true));\n  }\n}\n")),(0,o.mdx)("p",null,"There are two mock classes that are used to construct tests ",(0,o.mdx)("inlineCode",{parentName:"p"},"FlipperConnectionMock")," and ",(0,o.mdx)("inlineCode",{parentName:"p"},"FlipperResponderMock"),". Together these can be used to write very powerful tests to verify the end to end behavior of your plugin. For example we can test if for a given incoming message our plugin responds as we expect."),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-java"},'@Test\npublic void myTest() {\n  final MyFlipperPlugin plugin = new MyFlipperPlugin();\n  final FlipperConnectionMock connection = new FlipperConnectionMock();\n  final FlipperResponderMock responder = new FlipperResponderMock();\n\n  plugin.onConnect(connection);\n\n  final FlipperObject params = new FlipperObject.Builder()\n      .put("phrase", "flipper")\n      .build();\n  connection.receivers.get("myMethod").onReceive(params, responder);\n\n  assertThat(responder.successes, hasItem(\n      new FlipperObject.Builder()\n          .put("phrase", "ranos")\n          .build()));\n}\n'))),(0,o.mdx)(f,{mdxType:"FbAndroidTesting"})),(0,o.mdx)(l.Z,{value:"ios",mdxType:"TabItem"},(0,o.mdx)(g,{mdxType:"OssOnly"},(0,o.mdx)("p",null,"Start by creating your first test file in this directory ",(0,o.mdx)("inlineCode",{parentName:"p"},"MyFlipperPluginTests.cpp")," and import the testing utilities from ",(0,o.mdx)("inlineCode",{parentName:"p"},"fbsource//xplat/sonar/xplat:FlipperTestLib"),". These utilities mock out core pieces of the communication channel so that you can test your plugin in isolation."),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-objc"},"#include <MyFlipperPlugin/MyFlipperPlugin.h>\n#include <FlipperTestLib/FlipperConnectionMock.h>\n#include <FlipperTestLib/FlipperResponderMock.h>\n\n#include <folly/json.h>\n#include <gtest/gtest.h>\n\nnamespace facebook {\nnamespace flipper {\nnamespace test {\n\nTEST(MyFlipperPluginTests, testDummy) {\n  EXPECT_EQ(1 + 1, 2);\n}\n\n} // namespace test\n} // namespace flipper\n} // namespace facebook\n")),(0,o.mdx)("p",null,"Here is a simple test using these mock utilities to create a plugin, send some data, and assert that the result is as expected."),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-objc"},'TEST(MyFlipperPluginTests, testDummy) {\n  std::vector<folly::dynamic> successfulResponses;\n  auto responder = std::make_unique<FlipperResponderMock>(&successfulResponses);\n  auto conn = std::make_shared<FlipperConnectionMock>();\n\n  MyFlipperPlugin plugin;\n  plugin.didConnect(conn);\n\n  folly::dynamic message = folly::dynamic::object("param1", "hello");\n  folly::dynamic expectedResponse = folly::dynamic::object("response", "Hi there");\n\n  auto receiver = conn->receivers_["someMethod"];\n  receiver(message, std::move(responder));\n\n  EXPECT_EQ(successfulResponses.size(), 1);\n  EXPECT_EQ(successfulResponses.back(), expectedResponse);\n}\n'))),(0,o.mdx)(x,{mdxType:"FbIosTesting"}))),(0,o.mdx)("h2",{id:"running-flipper-tests"},"Running (Flipper) tests"),(0,o.mdx)("h3",{id:"flipper-desktop"},"Flipper Desktop"),(0,o.mdx)(g,{mdxType:"OssOnly"},(0,o.mdx)("p",null,"Run ",(0,o.mdx)("inlineCode",{parentName:"p"},"yarn jest")," or ",(0,o.mdx)("inlineCode",{parentName:"p"},"yarn jest --watch")," in the ",(0,o.mdx)("inlineCode",{parentName:"p"},"desktop")," directory of your Flipper checkout.")),(0,o.mdx)(h,{mdxType:"FbInternalOnly"},(0,o.mdx)("p",null,"Run ",(0,o.mdx)("inlineCode",{parentName:"p"},"yarn jest")," or ",(0,o.mdx)("inlineCode",{parentName:"p"},"yarn jest --watch")," in ",(0,o.mdx)("inlineCode",{parentName:"p"},"~/fbsource/xplat/sonar/desktop"))),(0,o.mdx)("h3",{id:"flipper-sdk"},"Flipper SDK"),(0,o.mdx)("h4",{id:"android-java"},"Android (Java)"),(0,o.mdx)(g,{mdxType:"OssOnly"},(0,o.mdx)("h5",{id:"gradle"},"Gradle:"),(0,o.mdx)("p",null,"In the root directory of the checkout:"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre"},"./gradlew android:test\n"))),(0,o.mdx)(h,{mdxType:"FbInternalOnly"},(0,o.mdx)("h5",{id:"gradle-1"},"Gradle:"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre"},"cd fbsource/xplat/sonar\n./gradlew android:test\n")),(0,o.mdx)("h5",{id:"buck"},"Buck:"),(0,o.mdx)("p",null,"I don't know of a way to run them locally \ud83d\ude1e Make a change and submit a diff."),(0,o.mdx)("p",null,(0,o.mdx)("inlineCode",{parentName:"p"},"buck test ...")," should work, but doesn't seem to when run in xplat on mac but they do work on mobile on demand, if you use @mode/server."),(0,o.mdx)("p",null,(0,o.mdx)("em",{parentName:"p"},"Debugging note: They do work if you copy the files and BUCK file to")," ",(0,o.mdx)("inlineCode",{parentName:"p"},"fbandroid/javatests")," ",(0,o.mdx)("em",{parentName:"p"},"and change the rule from")," ",(0,o.mdx)("inlineCode",{parentName:"p"},"sonar_android_test")," ",(0,o.mdx)("em",{parentName:"p"},"to")," ",(0,o.mdx)("inlineCode",{parentName:"p"},"robolectric3_test"))),(0,o.mdx)(h,{mdxType:"FbInternalOnly"},(0,o.mdx)("h3",{id:"ios"},"iOS"),(0,o.mdx)("p",null,"Focus on the plugins, or flipper code you want but with the --with-tests param."),(0,o.mdx)("p",null,(0,o.mdx)("inlineCode",{parentName:"p"},"arc focus ... --with-tests")),(0,o.mdx)("p",null,"Then click the <-> icon  in xcode and you can run them there.")),(0,o.mdx)("h3",{id:"react-native"},"React Native"),(0,o.mdx)("p",null,"See ",(0,o.mdx)("a",{parentName:"p",href:"testing-rn"},"testing React Native"),"."))}v.isMDXComponent=!0},86010:(e,n,t)=>{function r(e){var n,t,i="";if("string"==typeof e||"number"==typeof e)i+=e;else if("object"==typeof e)if(Array.isArray(e))for(n=0;n<e.length;n++)e[n]&&(t=r(e[n]))&&(i&&(i+=" "),i+=t);else for(n in e)e[n]&&(i&&(i+=" "),i+=n);return i}function i(){for(var e,n,t=0,i="";t<arguments.length;)(e=arguments[t++])&&(n=r(e))&&(i&&(i+=" "),i+=n);return i}t.r(n),t.d(n,{default:()=>i})}}]);